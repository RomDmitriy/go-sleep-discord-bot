import cron from 'node-cron';
import { Client } from 'discord.js';
import { getMinutesDifference, isInTimeInterval } from '../utils/time.utils.js';
import { sleepStore } from '../store/sleep.store.js';
import isTodayEnabled from '../utils/isTodayEnabled.utils.js';

export function startSleepChecker(client: Client) {
  cron.schedule('0 * * * * *', async () => {
    const users = sleepStore.getUsers();

    for (const userId of Object.keys(users)) {
      const user = users[userId];

      const { startTime, endTime } = user.intervalUTC;

      if (!isTodayEnabled(user.days)) {
        continue;
      }

      const minutesToStart = getMinutesDifference(startTime);

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏—è—Ö
      const member = findMemberInAnyGuild(client, userId);

      if (minutesToStart === 0 && member?.voice.channel) {
        await disconnectWithAnnouncement(member);
      }

      if (isInTimeInterval(startTime, endTime) && member?.voice.channel) {
        await disconnectUser(member, userId);
      }
    }
  });
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–æ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏—è—Ö
 */
function findMemberInAnyGuild(client: Client, userId: string) {
  for (const guild of client.guilds.cache.values()) {
    const member = guild.members.cache.get(userId);
    if (member) {
      return member;
    }
  }
  return null;
}

/**
 * –ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
 */
async function disconnectUser(member: any, userId: string) {
  try {
    await member.voice.disconnect();
    console.log(`Disconnected user ${userId} during sleep interval.`);
  } catch (e) {
    console.error(`Failed to disconnect user ${userId}:`, e);
  }
}

/**
 * –ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª
 */
async function disconnectWithAnnouncement(member: any) {
  try {
    const textChannel = member.voice.channel?.guild.systemChannel;

    await member.voice.disconnect();

    const message = `${member.displayName} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—à—ë–ª —Å–ø–∞—Ç—å. üò¥`;

    if (textChannel) {
      await textChannel.send(message);
    } else {
      console.log(`No system channel to send notification for ${member.displayName}`);
    }
  } catch (e) {
    console.error(`Failed to disconnect user ${member.id}:`, e);
  }
}
